import Head from 'next/head'
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import styles from '@/styles/Home.module.css'
import Select from '@mui/material/Select';
import FormControl from '@mui/material/FormControl';
import InputLabel from '@mui/material/InputLabel';
import MenuItem from '@mui/material/MenuItem';
import Alert from '@mui/material/Alert';

interface Location {
  id: number;
  lpn: string
  name: string;
  status: string;
}

export default function Home() {
  const router = useRouter();

  const [locations, setLocations] = useState<Location[]>([]); // Create a state variable called "locations" which is initially an empty array. Also, create a setter function called "setLocations" that will update the "locations" state variable
  const [selectedLocationId, setSelectedLocationId] = useState<number | null>(null); // Create a state variable called "selectedLocationId" which is initially null. Also, create a setter function called "setSelectedLocationId" that will update the "selectedLocationId" state variable
  let isLocationSelected = Boolean(selectedLocationId); // Create a boolean variable "isLocationSelected" which is true if "selectedLocationId" is not null and false otherwise
  
  useEffect(() => {
    if (selectedLocationId) { // If "selectedLocationId" is not null
      fetch(`https://b46f027d-3a5f-4de6-9075-5e861759e531.mock.pstmn.io/cam/${selectedLocationId}`) // Send a GET request to the specified URL
        .then(response => response.json()) // Parse the response as JSON
        .then(data => console.log(`Welcome ${data.response.lpn}`)) // Log the response data
        .catch(error => console.log(error)); // If there's an error, log it to the console
    }
  }, [selectedLocationId]); // This effect runs whenever "selectedLocationId" changes

  useEffect(() => {
    fetch('https://b46f027d-3a5f-4de6-9075-5e861759e531.mock.pstmn.io/locations') // Send a GET request to the specified URL
      .then(response => response.json()) // Parse the response as JSON
      .then(data => setLocations(data.response.locations)) // Update the "locations" state variable with the response data
      .catch(error => console.log(error)); // If there's an error, log it to the console
  }, []); // This effect runs only once, when the component mounts

  const maintenanceLocations = locations.filter(location => location.status === "maintenance"); // Create a new array called "maintenanceLocations" that contains only the locations whose status is "maintenance"

  return (
    <>
      <Head>
        <title>WashWorld</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.center}>
          <h1 className='titleStyle'>Select location</h1>
          <FormControl sx={{ m: 1, minWidth: 200, '&.MuiOutlinedInput-notchedOutline': {color: '#666'} }}>
            <InputLabel className='inputLabel' sx={{'&.Mui-focused': {color: '#666'}}}>Location</InputLabel>
            <Select
              labelId="select-location-label"
              id="location-select"
              label="Location"
              value={selectedLocationId || ''}
              onChange={(event) => setSelectedLocationId(Number(event.target.value))}
              sx={{'&.MuiOutlinedInput-notchedOutline': {color: '#666'}}}
            >
              {locations.map((location: Location) => (
                <MenuItem key={location.id} value={location.id} disabled={location.id === 3}>
                  {location.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </div>
      </main>
      <div className="alert-next-grid">
        {maintenanceLocations.map((location: Location) => (
          <Alert key={location.id} severity="error" >
            {`Location ${location.name} is under maintenance!`}
          </Alert>
        ))}
        <div className='navigation'>
          <Link href="/products">
            <button
              className='nextPage'
              onClick={() => {
                if (isLocationSelected) {
                  router.push('/products');
                }
              }}
              disabled={!isLocationSelected}
              title={!isLocationSelected ? 'Please select a location' : ''}
              >
                Next
                {!isLocationSelected && (
              <div className="overlay">
              </div>
            )}
            </button>
          </Link> 
        </div>
      </div>
    </>
  )
}
